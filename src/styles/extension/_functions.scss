@use 'sass:math';

@function round-decimal($number, $digits: 0) {
  @return to-fixed($number, $digits, 'round');
}

@function ceil-decimal($number, $digits: 0) {
  @return to-fixed($number, $digits, 'ceil');
}

@function floor-decimal($number, $digits: 0) {
  @return to-fixed($number, $digits, 'floor');
}

@function to-fixed($number, $digits: 0, $round: 'round') {
  $n: 1;

  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }

  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }

  @for $I from 1 through $digits {
    $n: $n * 10;
  }

  @if $round == 'round' {
    @return math.div(round($number * $n), $n);
  } @else if $round == 'ceil' {
    @return math.div(ceil($number * $n), $n);
  } @else if $round == 'floor' {
    @return math.div(floor($number * $n), $n);
  } @else {
    @warn '#{ $round } is undefined keyword.';
    @return $number;
  }
}

@function responsive-size($bpLower, $bpUpper, $min, $max, $unit) {
  $a: round-decimal(100 * math.div(($max - $min), ($bpUpper - $bpLower)), 3);
  $b: round-decimal($min - math.div($bpLower, 100) * $a, 3);
  $n: $min;
  $x: $max;

  @if $min > $max {
    $n: $max;
    $x: $min;
  }

  @if $unit == 'rem' {
    @return clamp(
      #{math.div($n, 10)}rem,
      calc(#{$a}vw + #{math.div($b, 10)}rem),
      #{math.div($x, 10)}rem
    );
  } @else {
    @return clamp(#{$n}#{$unit}, calc(#{$a}vw + #{$b}#{$unit}), #{$x}#{$unit});
  }

  @return clamp(#{$n}, calc(#{$a}vw + #{$b}), #{$x});
}
